" Vundle ---->

set nocompatible              " be iMproved, required
filetype off                  " required

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

" let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'
Plugin 'https://github.com/ctrlpvim/ctrlp.vim.git'
Plugin 'https://github.com/altercation/vim-colors-solarized.git'
" Plugin 'https://github.com/nanotech/jellybeans.vim.git'
Plugin 'https://github.com/rhysd/vim-clang-format.git'
Plugin 'https://github.com/scrooloose/nerdtree.git'
Plugin 'https://github.com/mileszs/ack.vim.git'
Plugin 'https://github.com/Valloric/YouCompleteMe.git'
Plugin 'brookhong/cscope.vim'
Plugin 'octol/vim-cpp-enhanced-highlight'
Plugin 'tpope/vim-fugitive'
Plugin 'tpope/vim-surround'
Plugin 'bling/vim-airline'
Plugin 'vim-airline/vim-airline-themes'
Plugin 'airblade/vim-gitgutter'
Plugin 'vim-scripts/Conque-GDB'
Plugin 'honza/vim-snippets'
Plugin 'jlanzarotta/bufexplorer'

" disabled because of poor performance of rope
" Plugin 'klen/python-mode'
" Plugin 'tell-k/vim-autopep8'
Plugin 'a.vim'

call vundle#end()            " required
filetype plugin indent on 

" <----- end of Vundle config

"
autocmd FileType python setlocal shiftwidth=4 tabstop=4

" doxygen comments (Max)
autocmd Filetype c,cpp set comments^=:///

" used by ctrlp
set wildignore+=*/tmp/*,*.so,*.swp,*.zip,*.o,*.pyc,*/.ccache,*/node_modules

" ctrlp: ignore files in .gitignore
let g:ctrlp_user_command = ['.git', 'cd %s && git ls-files -co --exclude-standard']


" show commands in status bar
set showcmd

" no beep
set visualbell

" line numbers
set number

" highlight search results
set hlsearch

" faster alternative to escape
" http://vim.wikia.com/wiki/Avoid_the_escape_key
" nnoremap <Tab> <Esc>
" vnoremap <Tab> <Esc>gV
" onoremap <Tab> <Esc>
" inoremap <Tab> <Esc>`^
" inoremap <Leader><Tab> <Tab>

" disable cursor keys (to get used to hjkl)
noremap <Up> <NOP>
noremap <Down> <NOP>
noremap <Left> <NOP>
noremap <Right> <NOP>

" noremap h <NOP>
" noremap j <NOP>
" noremap k <NOP>
" noremap l <NOP>


" spaces for tabs (http://stackoverflow.com/questions/234564/tab-key-4-spaces-and-auto-indent-after-curly-braces-in-vim)
filetype plugin indent on
" show existing tab with 4 spaces width
set tabstop=4
" when indenting with '>', use 4 spaces width
set shiftwidth=4
" On pressing tab, insert 4 spaces
set expandtab


" ------ NERDTree
" launch NERDTree at start
" autocmd vimenter * NERDTree
" Key mapping for NERDTree
map <C-n> :NERDTreeToggle<CR>


" ------- ag.vim (deprecated) --> ack.vim
" Use ag instead of ack, if available
if executable('ag')
  let g:ackprg = 'ag --vimgrep'
endif

" ------- cim-cpp-enhanced-highlight


" ------- vim-clang-format
" set custom executable

" Version 4 required for qtest development
let g:clang_format#command = 'clang-format-4.0'
" automatic formatting
let g:clang_format#auto_format = 0

" Use .clang-format (typically in project directory)
let g:clang_format#code_style = 'file'

" let g:clang_format#style_options = {
"             \ "ColumnLimit" : 120,
"             \ "IndentWidth" : 2,
"             \ "DerivePointerAlignment": "true",
"             \ "Standard" : "C++11"}


" -------- YouCompleteMe
"YouCompleteMe: python with virtualenv support
"py << EOF
" import os
" import sys
" if 'VIRTUAL_ENV' in os.environ:
"   project_base_dir = os.environ['VIRTUAL_ENV']
"     activate_this = os.path.join(project_base_dir, 'bin/activate_this.py')
"       execfile(activate_this, dict(__file__=activate_this))
"       EOF

" ---------------------------------------------------------
" Misc. key mappings


" (http://vimcasts.org/episodes/show-invisibles/)
nmap <leader>l :set list!<CR>
" Use the same symbols as TextMate for tabstops and EOLs
set listchars=tab:▸\ ,eol:¬


" ctrlp config
let g:ctrlp_match_window='let g:ctrlp_match_window=max:30'

"Invisible character colors 
highlight NonText guifg=#4a4a59
highlight SpecialKey guifg=#4a4a59

" jellybeans
" silent! colorscheme jellybeans

" vim-colors-solarized
syntax enable
" set background=dark
set background=light

" Missing when vim is first invoked by Ansible to install
" plugins, therefore silenced
silent! colorscheme solarized


" C++ advanced syntax highlighting
let g:cpp_class_scope_highlight = 1
let g:cpp_member_variable_highlight = 1
let g:cpp_experimental_simple_template_highlight = 1
let g:cpp_experimental_template_highlight = 1
let g:cpp_concepts_highlight = 1
" workaround for vim bug regarding curly braces
" https://github.com/octol/vim-cpp-enhanced-highlight
" let c_no_curly_error=1


" Airline config
set laststatus=2
let g:ConqueTerm_Color = 2         " 1: strip color after 200 lines, 2: always with color
let g:ConqueTerm_CloseOnEnd = 1    " close conque when program ends running
let g:ConqueTerm_StartMessages = 0 " display warning messages if conqueTerm is configured incorrectly  


" vim-autopep8
autocmd FileType python noremap <buffer> <F8> :call Autopep8()<CR>

" python-mode
"   improve performance https://github.com/python-mode/python-mode/issues/378`
let g:pymode_rope_lookup_project = 0

let g:pymode_folding = 0

" Custom make command for Docker container 
" see http://stackoverflow.com/a/18116241 
map <leader>j :set makeprg=./mymake <CR>:make <CR>:copen<CR> 


" cscope
nnoremap <leader>fa :call CscopeFindInteractive(expand('<cword>'))<CR>
nnoremap <leader>l :call ToggleLocationList()<CR>
Some optional key mappings to search directly.

" s: Find this C symbol
nnoremap  <leader>fs :call CscopeFind('s', expand('<cword>'))<CR>
" g: Find this definition
nnoremap  <leader>fg :call CscopeFind('g', expand('<cword>'))<CR>
" d: Find functions called by this function
nnoremap  <leader>fd :call CscopeFind('d', expand('<cword>'))<CR>
" c: Find functions calling this function
nnoremap  <leader>fc :call CscopeFind('c', expand('<cword>'))<CR>
" t: Find this text string
nnoremap  <leader>ft :call CscopeFind('t', expand('<cword>'))<CR>
" e: Find this egrep pattern
nnoremap  <leader>fe :call CscopeFind('e', expand('<cword>'))<CR>
" f: Find this file
nnoremap  <leader>ff :call CscopeFind('f', expand('<cword>'))<CR>
" i: Find files #including this file
nnoremap  <leader>fi :call CscopeFind('i', expand('<cword>'))<CR>

